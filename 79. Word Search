//试探-回溯法(深度优先搜索)。尝试用动态规划，但是有一些问题无法解决，如相同字符在相邻位置重复出现的问题
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(board.size()==0||board.begin()->size()==0)
        {
            return false;
        }
        vector<pair<int,int>> val_stack;
        vector<vector<bool>> has_chosen(board.size(),vector<bool>(board.begin()->size(),0)); //保存某个位置是否被选中
        return has_val(board,word,has_chosen,val_stack);
    }
    
    bool has_val(vector<vector<char>>& board, string word,vector<vector<bool>>& chosen,vector<pair<int,int>>& stack) 
    {
        if(stack.size()==word.size())
        {
            return true;
        }
        else
        {
            int next_val=stack.size();
            for(int i=0;i<board.size();i++)
            {
                for(int j=0;j<board.begin()->size();j++)
                {
                    if(board[i][j]==word[next_val]&&chosen[i][j]==0&&((next_val==0)||((abs(i-stack[next_val-1].first)==1&&abs(j-stack[next_val-1].second)==0))||(abs(i-stack[next_val-1].first)==0&&abs(j-stack[next_val-1].second)==1))) //保证某个位置的字符没有被选中过，且上一个数是和它相邻的
                    {
                        chosen[i][j]=1;
                        stack.push_back(make_pair(i,j));
                        if(has_val(board,word,chosen,stack))
                        {
                            return true;
                        }
                        chosen[i][j]=0;
                        stack.pop_back();
                    }
                }
            }
            return false;
        }
    }
};

