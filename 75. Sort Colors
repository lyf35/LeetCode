//只做一次扫描，效率较高
class Solution {
public:
    void sortColors(vector<int>& nums) {
        if(nums.size()==0)
        {
            return;
        }
        //用快速排序中的partition算法进行处理
        int zero_pos=0;
        int one_num=0;
        int two_num=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)
            {
                swap(nums[i],nums[zero_pos]);
                zero_pos++;
            }
            else if(nums[i]==1)
            {
                one_num++;
            }
            else
            {
                two_num++;
            }
        }
        if(one_num)
        fill(nums.begin()+zero_pos,nums.begin()+one_num+zero_pos,1);
        fill(nums.begin()+one_num+zero_pos,nums.end(),2);
    }
};

//两次扫描的算法，效率较低
class Solution {
public:
    void sortColors(vector<int>& nums) {
        vector<int> color_cnt(3,0);
        if(nums.size()==0)
        {
            return;
        }
        for(auto i:nums)
        {
            color_cnt[i]++;
        }
        auto iter=nums.begin();
        for(int i=0;i<3;i++)
        {
            for(auto j=0;j<color_cnt[i];j++)
            {
                *iter=i;
                iter++;
            }
        }
    }
};
