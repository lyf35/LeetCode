//时间复杂度为O(n^3)的算法，效率高一些
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> result;
        if(nums.size()<4) return result;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-3;i++)
        {
            if(i>0&&nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<nums.size()-2;j++)
            {
                if(j>i+1&&nums[j]==nums[j-1]) continue;
                int sum=target-nums[i]-nums[j];
                int left=j+1;
                int right=nums.size()-1;
                while(left<right)
                {
                    if(nums[left]+nums[right]==sum)
                    {
                        result.push_back(vector<int>{nums[i],nums[j],nums[left],nums[right]});
                        left++;
                        right--;
                        while(left<right&&nums[left]==nums[left-1]) left++;
                        while(left<right&&nums[right]==nums[right+1]) right--;
                    }
                    else if(nums[left]+nums[right]<sum) left++;
                    else right--;
                }
            }
        }
        return result;
    }
};


//一个时间复杂度为O(n^4)的算法，效率很低
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int number_count=nums.size();
        sort(nums.begin(),nums.end()); //先对原数组做排序
        set<vector<int>> result; //存放结果 
        for(int i=0;i<number_count;i++)
        {
            for(int j=i+1;j<number_count;j++)
            {
                for(int k=j+1;k<number_count;k++)
                {
                    for(int m=k+1;m<number_count;m++)
                    {
                        if(nums[i]+nums[j]+nums[k]+nums[m]==target)
                        {
                            result.insert(vector<int>{nums[i],nums[j],nums[k],nums[m]});
                        }
                        else if(nums[i]+nums[j]+nums[k]+nums[m]>target)
                        {
                            break;
                        }              
                    }
                }
            }
        }
        vector<vector<int>> return_val;
        for(auto elem:result)
        {
            return_val.push_back(elem);
        }
        return return_val;
    }
};
