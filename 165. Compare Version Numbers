class Solution {
public:
    int compareVersion(string version1, string version2) {
        unsigned int pos1=0;
        unsigned int pos2=0;
        while(true) //按照小数点进行拆分即可
        {
            unsigned int decimal_pos1=version1.find_first_of(".",pos1);
            unsigned int decimal_pos2=version2.find_first_of(".",pos2);
            unsigned int num1=stoi(version1.substr(pos1,decimal_pos1));
            unsigned int num2=stoi(version2.substr(pos2,decimal_pos2));
            if(num1<num2)
            {
                return -1;
            }
            else if(num1>num2)
            {
                return 1;
            }
            if(decimal_pos1>version1.size()||decimal_pos2>version2.size())
            {
                pos1=decimal_pos1;
                pos2=decimal_pos2;
                break;
            }
            pos1=decimal_pos1+1;
            pos2=decimal_pos2+1;
        }
        //接下来需要考虑后续的版本号是否全部是0
        if(pos1<version1.size()) //代表左侧字符串还没读取完
        {
            while(pos1<version1.size())
            {
                pos1++;
                unsigned int decimal_pos1=version1.find_first_of(".",pos1);
                unsigned int num1=stoi(version1.substr(pos1,decimal_pos1));
                if(num1!=0)
                {
                    return 1;
                }
                pos1=decimal_pos1;
            }
            return 0;
        }
        else if(pos2<version2.size()) //代表右侧字符串还没有读取完
        {
            while(pos2<version2.size())
            {
                pos2++;
                unsigned int decimal_pos2=version2.find_first_of(".",pos2);
                unsigned int num2=stoi(version2.substr(pos2,decimal_pos2));
                if(num2!=0)
                {
                    return -1;
                }
                pos2=decimal_pos2;
            }
            return 0;
        }
        else //都读取完，说明二者相等
        {
            return 0;
        }
    }
};
