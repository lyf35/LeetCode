//这种算法效率比dfs要高
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        //根据每个结点的入度来进行拓扑排序
        vector<int> result;
        vector<bool> has_found(numCourses,0);
        vector<unordered_set<int>> out_pts(numCourses,unordered_set<int>());
        vector<int> indegree(numCourses,0);
        for(auto i:prerequisites) //构造每个结点的出结点集合，以及每个结点的入结点数
        {
            out_pts[i.second].insert(i.first);
            indegree[i.first]++;
        }
        bool mark=true;
        while(mark)
        {
            queue<int> zero_indegree;
            for(int i=0;i<numCourses;i++)
            {
                if(!has_found[i]&&indegree[i]==0)
                {
                    zero_indegree.push(i);
                    has_found[i]=1;
                    for(auto iter=out_pts[i].begin();iter!=out_pts[i].end();iter++)
                    {
                        indegree[(*iter)]--;
                    }
                    out_pts[i].clear();
                }
            }
            if(zero_indegree.size())
            {
                while(zero_indegree.size())
                {
                    result.push_back(zero_indegree.front());
                    zero_indegree.pop();
                }
            }
            else
            {
                mark=false;
            }
        }
        if(result.size()<numCourses)
        {
            result.clear();
        }
        return result;
    }
};


//用dfs的方法来搜索，效率较低
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        //将每个结点dfs的结束顺序按照从大到小排列即可
        vector<vector<bool>> adj_graph(numCourses,vector<bool>(numCourses,0));
        for(auto val:prerequisites)
        {
            adj_graph[val.second][val.first]=1;
        }
        vector<int> dfs_start(numCourses,0);
        vector<bool> dfs_end(numCourses,0);
        vector<int> result;
        int cnt=1;
        for(auto i=0;i<numCourses;i++)
        {
            if(dfs_start[i]==0)
            {
                bool mark=dfs(adj_graph,dfs_start,dfs_end,i,numCourses,cnt,result);
                if(mark==0)
                {
                    return result;
                }
            }
        }
        return result;
    }
    bool dfs(vector<vector<bool>>& adj_graph,vector<int>& start,vector<bool>& end,int m,int num,int& cnt,vector<int>& result) //m代表进行dfs时要访问的结点
    {
        stack<int> visited_pts;
        start[m]=cnt++;
        visited_pts.push(m);
        while(visited_pts.size()) //先沿着一条路径寻找
        {
            int start_pos=visited_pts.top();
            int i=0;
            for(;i<num;i++)
            {
                if(adj_graph[start_pos][i]) 
                {
                    if(start[i]==0) //前向边
                    {
                        start[i]=cnt;
                        visited_pts.push(i);
                        break;
                    }
                    else if(start[start_pos]>start[i]&&!end[i])//遇到后向边
                    {
                        result.clear();
                        return 0;
                    }
                }
            }
            if(i==num)
            {
                end[start_pos]=1;
                result.insert(result.begin(),start_pos);
                visited_pts.pop();
            }
            cnt++;
        }
        return 1;
    }
};
