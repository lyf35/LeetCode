//借助int类型变量将string向量化，然后比较是否有相同字符的时候就容易的多
class Solution {
public:
    int maxProduct(vector<string>& words) {
        int max_val=0;
        vector<int> words_to_bool(words.size(),0); //用32位的int来储存26个字符中是否含有某个字符
        for(auto i=0;i<words.size();i++) //将words转换为int
        {
            for(auto c:words[i])
            {
                words_to_bool[i]|=(1<<(c-'a'));
            }
        }
        for(auto i=0;i<words.size();i++)
        {
            for(auto j=i+1;j<words.size();j++)
            {
                if(!(words_to_bool[i]&words_to_bool[j]))
                {
                    max_val=max(max_val,int(words[i].size()*words[j].size()));
                }
            }
        }
        return max_val;
    }
};

//蛮力算法，效率很低
class Solution {
public:
    int maxProduct(vector<string>& words) {
        int max_val=0;
        for(int i=0;i<words.size();i++)
        {
            for(int j=i+1;j<words.size();j++)
            {
                bool has_common=find_common_letters(words[i],words[j]);
                max_val=max(max_val,has_common?0:int(words[i].size()*words[j].size()));
            }
        }
        return max_val;
    }
    bool find_common_letters(string a,string b)
    {
        for(auto ch:a)
        {
            for(auto i=0;i<b.size();i++)
            {
                if(ch==b[i]) return 1;
            }
        }
        return 0;
    }
};
