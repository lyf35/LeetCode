//一遍扫描，将bull和cows的数量全部统计
class Solution {
public:
    string getHint(string secret, string guess) {
        //bulls：数字和位置必须都对应
        //cows：数字猜对，但是位置是错误的
        //注意数字可能会有重复
        int bulls=0;
        int cows=0;
        if(!secret.size()) return "0A0B";
        vector<int> digits(10,0);
        for(int i=0;i<secret.size();i++)
        {
            if(secret[i]==guess[i]) bulls++; //如果数字匹配，则给bulls+1
            else //如果不匹配，用正数代表在secret中出现，负数代表在guess中出现
            {
                if(digits[guess[i]-'0']>0) cows++; //代表guess上的这个数字之前在secret中出现过
                if(digits[secret[i]-'0']<0) cows++; //代表secret上的这个数字之前在guess中出现过
                digits[guess[i]-'0']--;
                digits[secret[i]-'0']++;
            }
        }
        return to_string(bulls)+"A"+to_string(cows)+"B";
    }
};


//两遍扫描，一遍统计bulls的数量，第二遍统计cows的数量
class Solution {
public:
    string getHint(string secret, string guess) {
        //bulls：数字和位置必须都对应
        //cows：数字猜对，但是位置是错误的
        //注意数字可能会有重复
        int bulls=0;
        int cows=0;
        string result;
        if(!secret.size()) return "0A0B";
        unordered_map<char,int> digits; //第一个表示数字，第二个表示数字个数
        for(int i=0;i<10;i++)
        {
            digits['0'+i]=0;
        }
        for(int i=0;i<secret.size();i++) //统计bulls的数目
        {
            if(secret[i]==guess[i]) bulls++;
            else digits[secret[i]]++;
        }
        for(int i=0;i<secret.size();i++) //统计cows的数目
        {
            if(secret[i]!=guess[i])
            {
                if(digits[guess[i]]>0)
                {
                    cows++;
                    digits[guess[i]]--;
                }
            }
        }
        result+=to_string(bulls);
        result+="A";
        result+=to_string(cows);
        result+="B";
        return result;
    }
};
