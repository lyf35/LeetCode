//加入一个辅助的哨兵结点，可以简化代码
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* sent=new ListNode(0); //哨兵结点
        sent->next=head;
        ListNode* temp=sent;
        ListNode* prev=temp; //注意此处定义的位置，如果定义在while循环内则会使得程序运行较慢
        ListNode* first=nullptr;
        ListNode* second=nullptr;
        while(true)
        {
            if(temp->next&&temp->next->next)
            {
                first=temp->next;
                second=temp->next->next;
                first->next=second->next;
                temp->next=second;
                second->next=first;
                temp=temp->next->next;
            }
            else
            {
                break;
            }
        }
        return sent->next;
    }
};


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* next_node;
        ListNode* return_val;
        ListNode* prev=nullptr;
        if(!head)
        {
            return nullptr;
        }
        else if(!(next_node=head->next))
        {
            return head;
        }
        else
        {
            return_val=next_node;
            while(true)
            {       
                ListNode* temp=next_node;
                head->next=next_node->next;
                next_node->next=head;
                if(prev)
                {
                    prev->next=next_node;
                }
                prev=head;
                if(!(head=head->next)||!(next_node=head->next))
                {
                    break;
                }
                
            }
        }
        return return_val;
    }
};
