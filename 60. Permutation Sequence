class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int> permutation_num(n,1); //保存1-n的阶乘数值
        for(auto i=1;i<n;i++)
        {
            permutation_num[i]=permutation_num[i-1]*(i);
        }
        vector<int> number_seq(n,0); //代表从高位到低位每次选取当前排名多少的数字
        int remainder=k-1;
        for(auto j=n-1;j>=0;j--)
        {
            number_seq[n-1-j]=remainder/permutation_num[j];
            remainder%=permutation_num[j];
        }
        vector<char> numbers;
        for(auto i=0;i<n;i++)
        {
            numbers.push_back('1'+i);
        }
        string result;
        for(auto i=0;i<n;i++)
        {
            result+=numbers[number_seq[i]];
            numbers.erase(numbers.begin()+number_seq[i]);
        }
        return result;
    }
};
