class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int bound=nums.size()/3;
        unordered_map<int,int> count;
        vector<int> result;
        for(auto num:nums) count[num]++;
        for(auto iter=count.begin();iter!=count.end();iter++)
        {
            if((*iter).second>bound) result.push_back((*iter).first);
        }
        return result;
    }
};

//另一种做法
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> result;
        int majorA = NULL;
        int majorB = NULL;
        int countA = 0;
        int countB = 0;
        
        for(int i = 0; i<nums.size(); i++){
            if(nums[i] == majorA){
                countA++;
                continue;
            }
            if(nums[i] == majorB){
                countB++;
                continue;
            }
            //found new element, if countA or countB is 0, then let majorA or majorB be the new element 
            if(countA == 0){
                majorA = nums[i];
                countA++;
                continue;
            }
            if(countB == 0){
                majorB = nums[i];
                countB++;
                continue;
            }
            //otherwise reduce the counters
            countA--;
            countB--;
        }
        
        //until now we found the first two elements with highest frequency
        //but we need to check theri counter is larger than n/3
        countA = 0;
        countB = 0;
        
        for(int i = 0; i< nums.size(); i ++){
            if(nums[i] == majorA){
                countA++;
            }else if(nums[i] == majorB){
                countB++;
            }
        }
        if(countA > nums.size()/3){
            result.push_back(majorA);
        }
        if(countB > nums.size()/3){
            result.push_back(majorB);
        }
        return result;
        
    }
};
