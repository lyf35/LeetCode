//由于每一次递归的时候算的数字会被重复使用，因此用一个数组将它们保存起来，这样就可以节省大量的计算时间
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<long>> result(m,vector<long>(n,1));
        for(auto i=1;i<m;i++)
        {
            for(auto j=1;j<n;j++)
            {
                result[i][j]=result[i-1][j]+result[i][j-1];
            }
        }
        return result[m-1][n-1];
    }
};

//最简单的递归算法，但是在递归调用的时候耗费的时间太多，会超时
class Solution {
public:
    int uniquePaths(int m, int n) {
        if((m==2&&n==1)||(m==1&&n==2)||(m==1&&n==1)) //递归的基础情况
        {
            return 1;
        }
        else if(m==0||n==0)
        {
            return 0;
        }
        else //递归情形，返回值公式的左边是代表从某一步向右走，右边代表某一步向下走
        {
            return uniquePaths(m-1,n)+uniquePaths(m,n-1);
        }
    }  
};
