/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
    int maxPoints(vector<Point>& points) {
        //任意两个点都可以组成一条线，因此需要循环n(n-1)/2次
        int pts=points.size();
        if(pts<3)
        {
            return pts;
        }
        int return_val=0;
        for(auto i=0;i<pts;i++)
        {
            for(auto j=i+1;j<pts;j++)
            {
                return_val=max(return_val,max_point(points,i,j));
            }
        }
        return return_val;
    }
    int max_point(vector<Point>& points,int m,int n) //判断一条线上有多少点落在这条线上面
    {
        int cnt=0;
        auto pts_m=points[m];
        auto pts_n=points[n];
        if(pts_m.x==pts_n.x&&pts_m.y==pts_n.y) //可能有两个点重合，此时返回值为重合的点个数
        {
            for(auto point:points)
            {
                if(point.x==pts_m.x&&point.y==pts_m.y)
                {
                    cnt++;
                }
            }
        }
        else
        {
            for(auto point:points)
            {
                cnt+=is_colinear(pts_m,pts_n,point);
            }            
        }

        return cnt;
    }
    bool is_colinear(Point m,Point n,Point q)  //判断三点是否共线的函数
    {
        if(long(n.x-m.x)*long(q.y-m.y)-long(n.y-m.y)*long(q.x-m.x)==0)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
};


//通过求斜率的方式来计算
class Solution {
public:
    int maxPoints(vector<Point> &points) {
        
        if(points.size()<2) return points.size();
        
        int result=0;
        
        for(int i=0; i<points.size(); i++) {
            
            map<pair<int, int>, int> lines;
            int localmax=0, overlap=0, vertical=0;
            
            for(int j=i+1; j<points.size(); j++) {
                
                if(points[j].x==points[i].x && points[j].y==points[i].y) {
                    
                    overlap++;
                    continue;
                }
                else if(points[j].x==points[i].x) vertical++;
                else {
                    
                    int a=points[j].x-points[i].x, b=points[j].y-points[i].y;
                    int gcd=GCD(a, b);
                    
                    a/=gcd;
                    b/=gcd;
                    
                    lines[make_pair(a, b)]++;
                    localmax=max(lines[make_pair(a, b)], localmax);
                }

                localmax=max(vertical, localmax);
            }
            
            result=max(result, localmax+overlap+1);
        }
        
        return result;
    }

private:
    int GCD(int a, int b) {
        
        if(b==0) return a;
        else return GCD(b, a%b);
    }
};
