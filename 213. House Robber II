class Solution {
public:
    int rob(vector<int>& nums) {
        int size=nums.size();
        if(!size) return 0;
        if(size==1) return nums[0];
        vector<int> num_delbeg(nums.begin()+1,nums.end()); //去掉头或者尾，这样就不用考虑头尾相连的可能性
        vector<int> num_delend(nums.begin(),nums.end()-1);
        return max(cal_max(num_delbeg),cal_max(num_delend));
    }
    int cal_max(vector<int> nums)
    {
        int length=nums.size();
        vector<int> result(length,0); //第i个位置代表前i个数可以取得的最大收益
        result[0]=nums[0];
        if(length>=1) result[1]=max(nums[0],nums[1]);
        for(auto i=2;i<length;i++)
        {
            result[i]=max(result[i-1],result[i-2]+nums[i]);
        }
        return result[length-1];
    }
};
