//仿照solution自己写的c++版本
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()>nums2.size())
        {
            return findMedianSortedArrays(nums2,nums1);
        }
        //此处可以假设nums1的数字比nums2要多
        int size1=nums1.size();
        int size2=nums2.size();
        //以pos1和pos2为分界线，如果将两个数组以pos1和pos2为界分开的话，pos1处的值一定小于pos2右侧的值，pos1右侧的值一定大于pos2处的值
        int min_pos=0,max_pos=size1,halflen=(size1+size2+1)/2; //此处一定注意halflen表达式中的+1，它主要是针对于数字总个数是奇数时的处理
        while(min_pos<=max_pos)
        {
            int i=(min_pos+max_pos)/2; //代表第一个数组的位置，每次用二分法来确定，因此时间复杂度为对数级的
            int j= halflen-i; //代表第二个数组的位置
            if(i<max_pos&&nums1[i]<nums2[j-1]) min_pos=i+1; //代表i对应的数字太小
            else if(i>min_pos&&nums1[i-1]>nums2[j]) max_pos=i-1; //代表i对应的数字太大 
            else //代表i处对应的数字与j处对应的数字刚好，可以返回
            {
                int maxleft=0;
                if(i==0) maxleft=nums2[j-1];
                else if(j==0) maxleft=nums1[i-1];
                else maxleft=max(nums1[i-1],nums2[j-1]);
                if((size1+size2)%2==1) return maxleft;
                
                int minright=0;
                if(i==size1) minright=nums2[j];
                else if(j==size2) minright=nums1[i];
                else minright=min(nums1[i],nums2[j]);
                return (maxleft+minright)/2.0;
            }
        }
        return 0.0;
    }
};

//之前自己写的算法
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int size1=nums1.size();
        int size2=nums2.size();
        if(size1>size2) //保证nums1的规模小于nums2
        {
            swap(nums1,nums2);
            swap(size1,size2);
        }
        if(size1==0)
        {
            if(size2%2)
            {
                return nums2[size2/2];
            }
            else
            {
                return (double)(nums2[size2/2-1]+nums2[size2/2])/2;
            }
        }
        int half_length=(size1+size2+1)/2;
        int left=0,right=size1;
        int pos1,pos2; //pos1和pos2之和为两个数组大小之和的一半，使其作为左边一半
        int max_left,min_right;
        while(left<=right) 
        {
            pos1=(left+right)/2;
            pos2=half_length-pos1;
            if(pos1>left&&nums1[pos1-1]>nums2[pos2]) //说明第一个数组左边分的太多，应该减小其规模
            {
                right=pos1-1;
            }
            else if(pos1<right&&nums2[pos2-1]>nums1[pos1]) //说明第二个数组左边分的太多，应该减小其规模
            {
                left=pos1+1;
            }
            else //如果pos1和pos2之前的数字全部小于pos1和pos2之后的数字
            {
                if(pos1==0) //计算左边的最大值
                {
                    max_left=nums2[pos2-1];
                }
                else if(pos2==0)
                {
                    max_left=nums1[pos1-1];
                }
                else
                {
                    max_left=nums1[pos1-1]<nums2[pos2-1]?nums2[pos2-1]:nums1[pos1-1];
                }
                if((size1+size2)%2==1)
                {
                    return max_left;
                }
                if(pos1==size1) //计算右边的最小值
                {
                    min_right=nums2[pos2];
                }
                else if(pos2==size2)
                {
                    min_right=nums1[pos1];
                }
                else
                {
                    min_right=nums1[pos1]>nums2[pos2]?nums2[pos2]:nums1[pos1];
                }
                return (double)(max_left+min_right)/2.0;
            }
        }
        return 0.0;
    }
};
