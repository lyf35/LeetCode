class Solution {
public:
    bool isAdditiveNumber(string num) {
        if(num.size()>2) return find_matching_pos(num);
        else return 0;
    }
    bool find_matching_pos(string num) //在字符串中找到可以匹配的位置
    {
        int length=num.size();
        for(int i=1;i<length;i++) //代表第一个字符串的长度
        {
            for(int j=1;j<length-i;j++) //代表第二个字符串的长度
            {
                string num1=num.substr(0,i);
                string num2=num.substr(i,j);
                string result=string_add(num1,num2);
                if((num1[0]=='0'&&num1.size()>1)||(num2[0]=='0'&&num2.size()>1)) continue; //如果某个字符串的起始为0，则不符合要求，可以直接进行下一个循环
                if(result==num.substr(i+j,result.size()))
                {
                    bool is_valid=check_is_valid(num,i,j);
                    if(is_valid) return 1;
                }
            }
        }
        return 0;
    }
    bool check_is_valid(string num,int i,int j)
    {
        int first_pos=0;
        int second_pos=i;
        int first_length=i;
        int second_length=j;
        while(second_pos+second_length<=num.size())
        {
            string result=string_add(num.substr(first_pos,first_length),num.substr(second_pos,second_length));
            if(result!=num.substr(second_pos+second_length,result.size())) break;
            else
            {
                first_pos=second_pos;
                first_length=second_length;
                second_pos=second_pos+second_length;
                second_length=result.size();
            }
        }
        if(second_pos+second_length!=num.size()) return 0;
        else return 1;
    }
    string string_add(string a,string b) //为了处理长字符串的加法，需要额外写一个字符串加法的程序，这样就不会发生溢出了
    {
        string result;
        int overflow=0;
        for(int a_pos=a.size()-1, b_pos=b.size()-1;a_pos>=0||b_pos>=0;a_pos--,b_pos--)
        {
            int a_num=a_pos>=0?a[a_pos]-'0':0;
            int b_num=b_pos>=0?b[b_pos]-'0':0;
            int digit_num=a_num+b_num+overflow;
            overflow=digit_num/10;
            digit_num%=10;
            result.insert(0,to_string(digit_num));
        }
        if(overflow) result.insert(0,to_string(overflow));
        return result;
    }
};
