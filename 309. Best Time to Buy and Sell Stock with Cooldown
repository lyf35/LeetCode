//使用状态机模型，效率更高
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //使用状态机模型的思想
        if(prices.size()<=1)
        {
            return 0;
        }
        int cash = 0, preCash = 0, hold = INT_MIN;
        //cash保存当天的最大收益（卖出或不做任何操作）
        //precash保存hold前的最大收益
        //hold保存的是买入过一次之后的状态
        for(auto n: prices)
        {
            int oldCash =  cash;
            cash = max(cash, hold+n);
            hold = max(hold, preCash-n);
            preCash = oldCash;
        }
        return cash;
    }
};


//用动态规划的算法来解决问题，效率较低
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //可以交易无限次，但是每一次交易之后有一天的冷却时间无法交易
        int days=prices.size();
        vector<int> max_profits(days,0); //存储第i天的所能取得的最大收益
        int max_val=0;
        for(int i=1;i<days;i++)
        {
            for(int j=0;j<i;j++) //这一循环代表第i天做卖出操作的最大收益，第j天是最近的一次买入时间 
            {
                int profit_prev=j>=2? max_profits[j-2]:0; //由于第j天的前一天需要休息，因此下标为j-2
                //最里面的max，左边代表第j天是买入操作的收益，右边是第j+1~i天不做任何操作的收益
                max_profits[i]=max(max_profits[i],max(profit_prev+prices[i]-prices[j],max_profits[j]));
            }
            max_val=max(max_val,max_profits[i]);
        }
        return max_val;
    }
};
