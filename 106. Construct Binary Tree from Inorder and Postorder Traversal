/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        //与前序和中序构造的思路差不多，此时是后序遍历的最后一个数字一定是根节点  
        if(!inorder.size()||!postorder.size())
        {
            return nullptr;
        }
        return construct_tree_interval(inorder,postorder,0,inorder.size()-1,0,postorder.size()-1);
    }
    int find_elem(int elem,vector<int>& inorder,int m,int n) //在第m和n个元素内搜索elem所在的位置
    {
        for(int i=m;i<=n;i++)
        {
            if(inorder[i]==elem)
            {
                return i;
            }
        }
    }
    TreeNode* construct_tree_interval(vector<int>& inorder, vector<int>& postorder,int in_m,int in_n,int post_m,int post_n) //用指定区间内的元素构造一个树结点，二者对应的区间大小必须相等
    {
        TreeNode* return_val=new TreeNode(postorder[post_n]); //前序遍历的第一个结点一定是根结点
        if(post_m!=post_n) //如果区间内不止一个结点，则需要递归构造左右结点
        {
            int pos=find_elem(postorder[post_n],inorder,in_m,in_n);
            if(in_m<pos) //说明有左子树
            {
                return_val->left=construct_tree_interval(inorder,postorder,in_m,pos-1,post_m,post_m+(pos-in_m)-1);
            }
            if(pos<in_n) //说明有右子树
            {
                return_val->right=construct_tree_interval(inorder,postorder,pos+1,in_n,post_m+(pos-in_m),post_n-1);
            } 
        }
        return return_val;
    } 
};
