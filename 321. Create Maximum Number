class Solution {
public:
vector<int> maxVector(vector<int> nums, int k) //求一个向量所能形成的长度为k的最大数字
{
    while (nums.size() > k) 
    {
        int i = 0, n = nums.size();
        for (; i < n - 1; ++i) 
        {
            if (nums[i] < nums[i + 1]) 
            {
                nums.erase(nums.begin() + i);
                break;
            }
        }
        if (i == n - 1) nums.erase(nums.begin() + i);
    }
    return nums;
}

bool compare(vector<int> &nums1, int i, vector<int> &nums2, int j) //比较两个vector的大小
{
    while (i < nums1.size() && j < nums2.size() && nums1[i] == nums2[j]) 
    {
        ++i;
        ++j;
    }
    if (j == nums2.size()) return true;
    if (i < nums1.size() && nums1[i] > nums2[j]) return true;
    return false;
}

vector<int> merge(vector<int> &nums1, vector<int> &nums2, int k) //对两数组做归并
{
    vector<int> res(k, 0);
    for (int i = 0, j = 0, r = 0; r < k; ++r) 
    {
        res[r] = compare(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];
    }
    return res;
}

vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) 
{
    int m = nums1.size(), n = nums2.size();
    vector<int> res(k, 0);
    for (int i = max(0, k - n); i <= min(k, m); ++i) 
    {
        auto v1 = maxVector(nums1, i);
        auto v2 = maxVector(nums2, k - i);
        auto tmp = merge(v1, v2, k);
        if (compare(tmp, 0, res, 0)) res = tmp;
    }
    return res;
}
};


//超过时间界的算法，效率较低
class Solution {
public:
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<int> result;
        int pos_1=0;
        int pos_2=0;
        int remain=k;
        while(remain>0)
        {
            remain--;
            int max_1=-1;
            int max_pos_1=pos_1;
            int max_2=-1;
            int max_pos_2=pos_2;
            for(int i=pos_1;i<min(((nums1.size())+(nums2.size()-pos_2)-remain),nums1.size());i++) //寻找数组1中可以取的最大元素
            {
                if(nums1[i]>max_1)
                {
                    max_1=nums1[i];
                    max_pos_1=i;
                }
            }
            for(int i=pos_2;i<min(((nums1.size()-pos_1)+(nums2.size())-remain),nums2.size());i++) //寻找数组2中可以取的最大元素
            {
                if(nums2[i]>max_2)
                {
                    max_2=nums2[i];
                    max_pos_2=i;
                }
            }
            //将最大数字放入结果中，前两种情况容易处理
            if(max_1<max_2) 
            {
                result.push_back(max_2);
                pos_2=max_pos_2+1;
            }
            else if(max_1>max_2)
            {
                result.push_back(max_1);
                pos_1=max_pos_1+1;
            }
            else //最后一种情况，需要同时处理两个子问题，并比较子问题的结果
            {
                vector<int> nums1_temp1(nums1.begin()+max_pos_1+1,nums1.end());
                vector<int> nums2_temp1(nums2.begin()+pos_2,nums2.end());
                vector<int> result1=maxNumber(nums1_temp1,nums2_temp1,remain); //代表相同的数字中取第一个
                vector<int> nums1_temp2(nums1.begin()+pos_1,nums1.end());
                vector<int> nums2_temp2(nums2.begin()+max_pos_2+1,nums2.end());
                vector<int> result2=maxNumber(nums1_temp2,nums2_temp2,remain); //代表相同的数字中取第二个
                bool is_first=0;
                for(int i=0;i<result1.size();i++)
                {
                    if(result1[i]!=result2[i])
                    {
                        is_first=result1[i]>result2[i];
                        break;
                    }
                }
                result.push_back(max_1);
                if(is_first) result.insert(result.end(),result1.begin(),result1.end());
                else result.insert(result.end(),result2.begin(),result2.end());
                return result;
            }
        }
        return result;
    }
};
