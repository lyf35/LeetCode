//优化过的扫描线算法
class Solution {
public:
    vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {
        std::map<int, vector<int>> events;
        for(int i = 0; i < buildings.size(); i++)
        { //构造扫描线，一次性构造完扫描线可以更好地利用局部性来提速
            events[buildings[i][0]].push_back(buildings[i][2]); //用正/负值来确定是开始或者结束
            events[buildings[i][1]].push_back(-buildings[i][2]);
        }
        
        vector<pair<int, int>> ans;
        std::multiset<int> array; //保存某个时刻内所有建筑的高度
        int H = 0;
        for(auto it = events.begin(); it != events.end(); it++)
        { //遍历每一个扫描线
            for(int i = 0; i < it->second.size(); i++) //处理建筑的高度，根据正负值来决定是插入还是删除
            {
                if(it->second[i] > 0)
                {
                    array.emplace(it->second[i]);
                }
                else
                {
                    auto find = array.find(-it->second[i]);
                    array.erase(find);
                }
            }
            
            if(array.size() > 0) //判断是否需要向结果中插入一个点
            {
                int h = *array.rbegin();
                if(h != H)
                {
                    H = h;
                    ans.push_back(make_pair(it->first, H));
                }
            }
            else
            {
                H = 0;
                ans.push_back(make_pair(it->first, H));
            }
        }
        return ans;
    }
};



//未经优化的扫描线算法，效率较低
class Solution {
public:
    vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {
        vector<pair<int,int>> result;
        int nums=buildings.size();
        list<vector<int>> scanline; //用从左到右扫描的方法，记录当前在同一位置的所有建筑
        int curr_pos=0; //记录当前扫描的横坐标
        int pos=0; //记录下一个该读取的建筑
        bool is_right=0;
        while(pos<nums||scanline.size())
        {
            int next_pos=INT_MAX; //记录下一处扫描的横坐标
            if(scanline.size()==0) //如果某个时刻，在扫描线上面没有任何元素，则直接跳到下一个建筑去
            {
                curr_pos=buildings[pos][0];
                int max_height=0;
                while(pos<nums&&buildings[pos][0]==curr_pos) //此时可能出现同一个位置有多个建筑重合的情况
                {
                    scanline.push_back(buildings[pos]);
                    max_height=max(max_height,buildings[pos][2]);
                    next_pos=min(next_pos,buildings[pos][1]);
                    pos++;
                }
                is_right=1;
                result.push_back(make_pair(curr_pos,max_height));
            }
            else //扫描线上面有建筑，此时需要输出一个值
            {
                if(is_right) //代表这个元素是右侧端点，需要在扫描线中删除此元素
                {
                    auto iter=scanline.begin();
                    while(iter!=scanline.end()) //寻找要被删去的元素
                    {
                        if((*iter)[1]==curr_pos)
                        {
                            auto temp=iter;
                            iter++;
                            scanline.erase(temp);
                        }
                        else iter++;
                    }
                }
                int max_height=0;
                if(scanline.size()) //删除之后如果仍有元素，需要寻找最大高度
                {
                    for(auto iter=scanline.begin();iter!=scanline.end();iter++) 
                    {
                        max_height=max((*iter)[2],max_height); //代表此时的最大高度
                        if((*iter)[0]>curr_pos) //寻找下一时刻要扫描的位置
                        {
                            if(next_pos>=(*iter)[0])
                            {
                                next_pos=(*iter)[0];
                                is_right=0;
                            }
                        }
                        if((*iter)[1]>curr_pos)
                        {
                            if(next_pos>=(*iter)[1])
                            {
                                next_pos=(*iter)[1];
                                is_right=1;
                            }
                        }
                    }
                }
                else if(pos<nums&&buildings[pos][0]==curr_pos) //删除之后不存在元素，但是楼左右相接的情况
                {
                    while(pos<nums&&buildings[pos][0]==curr_pos) //处理左端点重合的情况
                    {
                        scanline.push_back(buildings[pos]);
                        next_pos=min(next_pos,buildings[pos][1]);
                        max_height=max(buildings[pos][2],max_height);
                        pos++;
                    }
                    is_right=1; 
                }
                if(max_height!=result.back().second) result.push_back(make_pair(curr_pos,max_height)); //如果发生了高度差变化，则需要插入新的点
            }
            if(pos<nums&&buildings[pos][0]<next_pos) //代表之前寻找的下一个位置之前还有建筑漏掉
            {
                next_pos=buildings[pos][0];
                while(pos<nums&&buildings[pos][0]==next_pos) //处理左端点重合的情况
                {
                    scanline.push_back(buildings[pos]);
                    pos++;
                }
                is_right=0;
            }
            curr_pos=next_pos;
        }
        return result;
    }
};
