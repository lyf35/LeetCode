//使用kmp算法进行字符串匹配，这样可以将时间节省至O(n)
//beautiful algorithm  just add some comments 
class Solution {
public:
    string shortestPalindrome(string s) {
        string rs = s;  // rs means reverse str of s;
        std::reverse(rs.begin(), rs.end());
        string mirror = s + "#" + rs;  // so if the s is aacecaaa the mirror is like               aacecaaa#aaacecaa
        //now we run kmp algorithm on mirror we will get next fun of mirror, so mirror is just like a pattern in kmp algorithm
        vector<int> next(mirror.size(),0);
        next[0] = 0;//this is really not needed, because we have init all next to 0, here we just set first character's next 0
        for(int i = 1, k = 0; i < mirror.size(); i++){
            while(k > 0 && mirror[k] != mirror[i]){ //if the suffix mismatch the preffix, we set k back just like AC goto fun
                k = next[k-1];
            }
            if(mirror[k] == mirror[i]){   // here suffix match preffix ,so we add k++
                k++;
            }
            next[i] = k;
        }
        //when we finish the next, we will get like below
        //string = a a c e c a a a # a a a c e c a a
        //next   = 0 1 0 0 0 1 2 2 0 1 2 2 3 4 5 6 7
        // this is just the next index of character of kmp 
        //if you can not understand this see here
        //the last character's next is all we need
        int matchnums = next[mirror.size()-1];
        int mismatch = rs.size() - matchnums;
        string misstr = rs.substr(0,mismatch);
        return misstr + s;
    }
};

//蛮力算法，效率很低
class Solution {
public:
    string shortestPalindrome(string s) {
        int length=s.size();
        if(length<2)
        {
            return s;
        }
        int min_length=INT_MAX;
        int min_pos=0;
        //由于只能在字符串前面补充字符，因此“水仙花”字符串的对称位置一定在前半部分
        for(int i=1;i<=length/2;i++) 
        {
            //先判断以i为中心对称的情况
            int j=0;
            for(;j<i;j++)
            {
                if(s[j]!=s[2*i-j]) break;
            }
            if(j==i&&min_length>2*(length-i)-1) //代表以i为中心可以对称
            {
                min_pos=i;
                min_length=2*(length-i)-1;
            }
            int k=0;
            for(;k<i;k++)
            {
                if(s[k]!=s[2*i-1-k]) break;
            }
            if(k==i&&min_length>2*(length-i))
            {
                min_pos=i;
                min_length=2*(length-i);
            }
        }
        int i=min_pos+min_length%2;
        string result=s.substr(i,length);
        reverse(result.begin(),result.end());
        if(min_length%2) result+=s[min_pos];
        result+=s.substr(i,length);
        return result;
    }
};
