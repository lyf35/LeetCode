//自己二刷时写的更简单的代码
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        //注意s中的匹配位置不一定是从words长度的整数倍开始的
        vector<int> result;
        if(s.size()==0||words.size()==0) return result;
        int word_length=words[0].size(); //存储每一个word的长度
        if(word_length*words.size()>s.size()) return result;
        unordered_map<string,int> word_count; //保存每一个word的数目
        for(auto str:words) word_count[str]++;
        for(int i=0;i<word_length;i++)
        {
            int valid_cnt=0;
            unordered_map<string,int> cnt; //保存从第i个位置开始的字符串结果
            int beg_pos=i;
            for(int pos=i;pos<=s.size()-word_length;pos+=word_length)
            {
                string temp=s.substr(pos,word_length);
                
                if(word_count.count(temp))
                {
                    cnt[temp]++;
                    valid_cnt++;
                    
                    while(cnt[temp]>word_count[temp])
                    {
                        string temp_str=s.substr(beg_pos,word_length);
                        cnt[temp_str]--;
                        valid_cnt--;
                        beg_pos+=word_length;
                    }
                    
                    if(valid_cnt==words.size())
                    {
                        result.push_back(beg_pos);
                        cnt[s.substr(beg_pos,word_length)]--;
                        valid_cnt--;
                        beg_pos+=word_length;
                    }
                }
                else
                {
                    cnt.clear();
                    valid_cnt=0;
                    beg_pos=pos+word_length;
                }
            }
        }
        return result;
    }
};

//由于题目中设定words中每个字符串的长度都相等，因此使用hashmap可以很容易地解决问题
class Solution {
public:
    vector<int> findSubstring(string S, vector<string> &L) {
        vector<int> ans; 
        int n = S.size(), cnt = L.size(); 
        if (n <= 0 || cnt <= 0) return ans;
        
        unordered_map<string, int> dict;
        for (int i = 0; i < cnt; ++i) dict[L[i]]++; //把L中所有的字符串都放到hashmap中
        
        int wl = L[0].size(); //取第一个字符串的长度
        for (int i = 0; i < wl; ++i) //每次错开一个位置，直至与之前的错位重合
        {
            int left = i, count = 0; //left代表从左侧开始搜索的位置，
            unordered_map<string, int> tdict; //保存s中的搜索结果
            for (int j = i; j <= n - wl; j += wl) //每次移动的距离为字符串长度
            {
                string str = S.substr(j, wl); //取字符串长度个字符
                
                if (dict.count(str)) //判断所取字符是否在hashmap中，如果在，则需要进一步处理
                {
                    tdict[str]++; //在第二个hashmap中对字符串的数量+1
                    if (tdict[str] <= dict[str]) //说明这一分段中的某一字符串数目不够，或是刚好够
                        count++; //对字符串的数量做累计
                    else //如果某个字符串的数量超了
                    {
                        while (tdict[str] > dict[str]) //对字符串的范围进行缩小，直到S中所选的那个范围内这个字符串的个数正好等于L中这个字符串的个数
                        {
                            string str1 = S.substr(left, wl); //从搜索位置的最左侧开始
                            tdict[str1]--; //减小某个子字符串的数量
                            if (tdict[str1] < dict[str1]) count--; //由于要移动标记，因此这一子字符串不被包括进去，要相应地减掉
                            left += wl; //将左侧标记向右移动
                        }
                    }
                    
                    if (count == cnt) //如果某处字符串刚好全部匹配上
                    {
                        ans.push_back(left); //把结果加入到vector中
                        // advance one word
                        tdict[S.substr(left, wl)]--; //将left标记右移，同时去掉右移时被去掉的字符串
                        count--;
                        left += wl;
                    }
                }
                
                else //如果取的字符不在hashmap中，则直接右移，并将所有变量全部复位 
                {
                    tdict.clear();
                    count = 0;
                    left = j + wl;
                }
            }
        }
        return ans;
    }
};


//一种通用的办法，不必要求words中每个字符串的长度都相等，先逐一对每个字符串检查匹配，然后检查这些字符串是否能串起来
class Solution {   
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> return_val;
        int words_num=words.size();
        vector<vector<int>> match_place; //存储每个子字符串可以匹配的位置
        vector<int> words_length; //存储每个子字符串的长度
        unordered_map<string,int> duplicate_num; //保存每个字符串重复的数目 
        if(s.size()==0||words_num==0)
        {
            return return_val;
        }
        for(auto str:words) //记录每个元素的重复次数
        {
            ++duplicate_num[str];
        }
        sort(words.begin(),words.end()); //对字符串列表去重
        auto iter=unique(words.begin(),words.end());
        words.erase(iter,words.end());
        int unique_words_num=words.size();
        int total_length=0; //保存匹配字符串的总长度
        for(auto i=0;i<unique_words_num;i++) //先找出每个子字符串可以匹配的位置
        {
            int ith_size=words[i].size();
            words_length.push_back(ith_size);
            auto temp=findstring(s,words[i]);
            if(!temp.size()) //代表某个字符没有匹配上
            {
                return return_val;
            }
            else
            {
                match_place.push_back(temp);
            }
            total_length+=ith_size*duplicate_num[words[i]];
        }
        while(true)
        {
            int min_pos=INT_MAX; //字符串匹配的最小位置
            int words_pos=0; //最小位置匹配对应的那个子字符串
            for(auto i=0;i<unique_words_num;i++) //先找到最小匹配位置
            {
                if(match_place[i][0]<min_pos)
                {
                    min_pos=match_place[i][0];
                    words_pos=i;
                }
            }
            if(min_pos+total_length>s.size()) //说明剩余字符串的长度小于待匹配字符串的总长度，可以直接退出
            {
                break;
            }
            int concatenate_count=1; //记录已经匹配到的字符个数
            vector<int> is_found(unique_words_num,0); //记录匹配到的是哪一个字符
            vector<int> next_search_place(unique_words_num,0); //记录下一次开始搜索的时候从哪一个位置开始，以节省时间
            next_search_place[words_pos]=1;
            is_found[words_pos]=1;
            int next_pos=min_pos+words_length[words_pos];
            if(concatenate_count==words_num) //相当于只有一个字符串
            {
                return_val.push_back(min_pos);
            }
            while(concatenate_count!=words_num&&next_pos<s.size()) //如果字符串个数多于1个，还需要继续做搜索
            {
                for(int i=0;i<unique_words_num;i++) //从字符列表里面选一个字符串
                {
                    for(int j=next_search_place[i];j<match_place[i].size();j++) //遍历字符串的每一个匹配位置
                    {
                        if(match_place[i][j]==next_pos) //相当于找到了一个可以匹配的位置
                        {
                            if(is_found[i]==duplicate_num[words[i]]) //代表某个字符被重复找到
                            {
                                goto fail;
                            }
                            else
                            {
                                concatenate_count++;
                                ++is_found[i];
                                next_pos+=words_length[i];
                                if(concatenate_count==words_num)
                                {
                                    return_val.push_back(min_pos);
                                }
                                next_search_place[i]=j+1;
                                goto next;
                            }

                        }
                        else if(match_place[i][j]>next_pos) //由于匹配按照递增顺序排列，如果某处可匹配的位置已经大于应该匹配的位置，可以直接进入下一步循环
                        {
                            break;
                        }
                    }
                }
                fail:
                break; //相当于搜索一遍之后没有搜索到，因此可以退出循环
                next:
                ;
            }
            match_place[words_pos].erase(match_place[words_pos].begin()); //删除掉那个最小的元素
            if(!match_place[words_pos].size()) //如果为空，可以直接退出循环并返回
            {
                break;
            }
        }
        return return_val;
    }
    
    vector<int> findstring(string& s,string& p) //一个在s中查找子字符串p并返回其位置的代码
    {
        vector<int> jump_table(p.size(),-1);
        int pos=-1;
        for(int i=1;i<p.size();i++) //构造跳转表
        {
            while(p[pos+1]!=p[i]&&pos>=0)
            {
                pos=jump_table[pos];
            }
            if(p[pos+1]==p[i])
            {
                pos++;
            }
            jump_table[i]=pos;
        }
        vector<int> result;
        pos=-1;
        for(int i=0;i<s.size();i++)
        {
            while(p[pos+1]!=s[i]&&pos>=0)
            {
                pos=jump_table[pos];
            }
            if(p[pos+1]==s[i])
            {
                pos++;
            }
            if(pos==p.size()-1)
            {
                result.push_back(i-p.size()+1);
                pos=jump_table[pos];
            }
        }    
        return result;
    }
};

//一个效率较低的通用算法，不必要求words中的全部字符长度都相等。构造所有字符的全排列，然后用kmp算法进行匹配。这样在遇到较长字符串的时候就会超出时间限制
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> return_val;
        int words_num=words.size();
        vector<int> val;
        for(int i=0;i<words_num;i++)
        {
            val.push_back(i);
        }
        vector<vector<int>> permutation=yield_permutation(val);
        for(auto num_seq:permutation)
        {
            string combination=str_concatenation(words,num_seq);
            auto match_pos=findstring(s,combination);
            return_val.insert(return_val.end(),match_pos.begin(),match_pos.end());
        }
        sort(return_val.begin(),return_val.end());
        auto p=unique(return_val.begin(),return_val.end());
        return_val.erase(p,return_val.end());
        return return_val;
    }
    
    vector<int> findstring(string& s,string& p) //一个在s中查找子字符串p并返回其位置的代码
    {
        vector<int> jump_table(p.size(),-1);
        int pos=-1;
        for(int i=1;i<p.size();i++) //构造跳转表
        {
            while(p[pos+1]!=p[i]&&pos>=0)
            {
                pos=jump_table[pos];
            }
            if(p[pos+1]==p[i])
            {
                pos++;
            }
            jump_table[i]=pos;
        }
        vector<int> result;
        pos=-1;
        for(int i=0;i<s.size();i++)
        {
            while(p[pos+1]!=s[i]&&pos>=0)
            {
                pos=jump_table[pos];
            }
            if(p[pos+1]==s[i])
            {
                pos++;
            }
            if(pos==p.size()-1)
            {
                result.push_back(i-p.size()+1);
                pos=jump_table[pos];
            }
        }    
        return result;
    }
    
    vector<vector<int>> yield_permutation(vector<int> num)
    {
        int size_num=num.size();
        vector<vector<int>> result;
        if(size_num==1)
        {
            result.push_back(vector<int>{num[0]});
        }
        else if(size_num==2)
        {
            result.push_back(vector<int>{num[0],num[1]});
            result.push_back(vector<int>{num[1],num[0]});
        }
        else
        {
            for(int i=0;i<size_num;i++)
            {
                vector<int> temp=num;
                int select_num=temp[i];
                temp.erase(temp.begin()+i);
                auto temp_result=yield_permutation(temp);
                for_each(temp_result.begin(),temp_result.end(),[select_num](vector<int>& vec){vec.push_back(select_num);});
                for(auto vec:temp_result)
                {
                    result.push_back(vec);
                }
            }
        }
        return result;
    }
    
    string str_concatenation(vector<string>& words,vector<int>& num_seq)
    {
        string concat_result;
        for(auto i:num_seq)
        {
            concat_result=concat_result+words[i];
        }
        return concat_result;
    }
};
