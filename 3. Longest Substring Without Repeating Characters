//二刷的时候，使用一个更加简洁的方法
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int max_length=0;
        vector<int> visited(128,-1); //此处也可以用unordered_map代替
        int start=-1;
        for(int i=0;i<s.size();i++)
        {
            if(visited[s[i]]>start) //代表从start位置开始，某个元素已经被访问过了，这样就不必将vector重置
            {
                start=visited[s[i]];
            }
            visited[s[i]]=i;
            max_length=max(max_length,i-start);
        }
        return max_length;
    }
};


//第一次刷的思路，这种方法浪费的空间太大
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int string_length=s.size();
        if(string_length==0)
        {
            return 0;
        }
        int length[string_length];
        for(auto i=0;i<string_length;i++)
        {
            int cnt=1;
            for(auto j=i+1;j<string_length;j++)
            {
                if(s[j]!=s[i])
                {
                    cnt++;
                }
                else
                {
                    break;
                }
            }
            length[i]=cnt;
        }
        for(auto i=string_length-3;i>=0;i--)
        {
            int pos=i+length[i];
            for(auto j=pos-1;j>=i;j--)
            {
                if(length[j]+j<pos)
                {
                    length[i]=length[j]+j-i;
                }
            }
        }
        int max=0;
        for(int i=0;i<string_length;i++)
        {
            if(length[i]>max)
            {
                max=length[i];
            }
        }
        return max;
    }
};
